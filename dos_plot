#!/bin/bash

################################ Help part #############################################
help_list="h -h --h help -help --help"
arg=$(echo $1 | tr 'A-Z' 'a-z' | sed 's/-/\\-/g')
if [ ! -z "$(echo "$help_list" | grep "$arg")" ]; then
    cat << EOF
Program: $(basename $0)
Author : Maxim Rakitin
Email  : rms85@physics.susu.ac.ru
Date   : 2010-10-17 (Sun)
Version: 1.2 (Changed on 2010-10-19 (Tue))

The program is to plot DOS graphs with spin-up and spin-down parts in png format

The input values can be:
------------------------
1. Number of atom. Example: 
       dos_plot 14

2. Number of atom with a particular orbital, e.g. 
       dos_plot 14:s. 
   All possible values can be found in the corresponding *.int file.
   For now there are the following orbitals: tot s p d d-eg d-t2g f (short abbreviations are: tot (or empty by default) s p d e t f)
(Not yet implemented)

3. Some orbitals of one atom or different atoms on one graph. Example: 
       dos_plot 14:tot+15:tot (it's equal to dos_plot 14+15)

4. Some graphs at once in separate png files, e.g.
       dos_plot 14:tot+15:tot 14:s+14p 15:e+15:t+17:e+17:t 32+55

5. All total DOS in separate png files:
       dos_plot all

EOF
    exit 1
fi

################################ Main variables ########################################
init_dir="$(echo $PWD | sed 's/\/panfs\/panasas//g')"
calc_dir="$(basename $init_dir)"
struct_file="$calc_dir.struct"
dosdir="dos_dir_0.01"

################################ Check part ############################################
# Check if the directory is correct: it must contain case.struct file and DOS directory.
if [ ! -f "$struct_file" -o ! -d "$dosdir" ]; then
    echo "  WARNING!!! The directory $init_dir is incorrect: either there is no $struct_file file or $dosdir."
    exit 2
fi

# Check if fonts file exist
fonts_file="$HOME/.fonts/ARIAL.TTF"
if [ ! -f "$fonts_file" ]; then
    "  WARNING!!! Required font file $fonts_file doesn't exist"
    exit 3
fi

################################ Graphs part ###########################################
# Process all arguments and plot different graphs for each one
if [ "$1" = "all" ]; then   # Plot total DOS for all atoms which DOS files exist in DOS directory
    arg_string=$(echo $(ls -1 $dosdir/*.int | cut -d/ -f2 | cut -d_ -f2))
else                        # Plot DOS only for specified atoms
    arg_string=$@
fi

index=0
for arg in $arg_string; do
    unset check_plus dos_atoms_num dos_atom atom_num atom_num_2signs atom_type atom_dir\
	  infile_up infile_dn atoms_blanks atoms_string style_line plot_line

    let "index = $index + 1"
    echo "Processing argument $index with DOS parameters: $arg"

    dos_atoms_plus=$(echo "$arg" | sed 's/+/\n/g' | sort | uniq)
    dos_atoms_num=$(echo "$dos_atoms_plus" | wc -l)
    for((i=1; i<=$dos_atoms_num; i++)); do
        dos_atom[$i]=$(echo "$arg" | cut -d+ -f $i)
        # echo "dos_atom[$i] = ${dos_atom[$i]}"
    done

    for((i=1; i<=${#dos_atom[@]}; i++)); do
	atom_num[$i]=$(echo ${dos_atom[$i]} | sed 's/^0//g')
	if [ "${atom_num[$i]}" -lt "10" ]; then
    	    atom_num_2signs[$i]="0${atom_num[$i]}"
	else
    	    atom_num_2signs[$i]="${atom_num[$i]}"
	fi

	# Check if the atom under input number exists
	atom_type[$i]=$(grep "ATOM" $struct_file -A 2 | grep "\-${atom_num[$i]}:" -A 2 | tail -1 | awk '{print $1}')
	if [ -z "${atom_type[$i]}" ]; then
    	    echo "  WARNING!!! Atom type isn't defined"
    	    exit 4
        fi

	# Check input DOS files generated by dos_generate utility
	atom_dir[$i]="atom_"${atom_num_2signs[$i]}"_"${atom_type[$i]}
	infile_up[$i]="$init_dir/$dosdir/${atom_dir[$i]}/${atom_dir[$i]}.up"
	infile_dn[$i]="$init_dir/$dosdir/${atom_dir[$i]}/${atom_dir[$i]}.dn"
	if [ ! -f "${infile_up[$i]}" -o ! -f "${infile_dn[$i]}" ]; then
    	    echo "\
  WARNING!!! DOS-files 
      ${infile_up[$i]}
  or 
      ${infile_dn[$i]}
  don't exist"
    	    exit 5
	fi

	# Style lines for gnuplot
        if [ ! -z "$style_line" ]; then
	    style_line="$style_line
set style line $i lt $i pt 28"
        else
	    style_line="\
set style line $i lt $i pt 28"
        fi

	# Plot lines for gnuplot
	if [ "$i" != "${#dos_atom[@]}" ]; then
	    end_line=" ,\\"
	else
	    end_line=""
	fi
	
	if [ ! -z "$plot_line" ]; then
	    plot_line="$plot_line
     \"${infile_up[$i]}\" using 1:2 title \"Total DOS of "${atom_type[$i]}""${atom_num[$i]}"\" with lines linestyle $i ,\\
     \"${infile_dn[$i]}\" using 1:2 notitle with lines linestyle $i""$end_line"
	else
	    plot_line="\
\"${infile_up[$i]}\" using 1:2 title \"Total DOS of "${atom_type[$i]}""${atom_num[$i]}"\" with lines linestyle $i ,\\
     \"${infile_dn[$i]}\" using 1:2 notitle with lines linestyle $i $end_line"
	fi

	# This part is for output file name genetation
	if [ ! -z "$atoms_string" ]; then
	    atoms_string="$atoms_string
${atom_type[$i]}${atom_num[$i]}"
	else
	    atoms_string="${atom_type[$i]}${atom_num[$i]}"
	fi
    done

    atoms_blanks=$(echo $(echo "$atoms_string" | sort | uniq) | sed 's/  / /g')
    atoms_string=$(echo "$atoms_blanks" | sed 's/ /_/g')

    # Organize gnuplot input format
    outfile="$init_dir/$dosdir/$calc_dir.$atoms_string.png"
    plot_script="$calc_dir.$atoms_string.gplot"
    echo "\
#!/usr/bin/gnuplot -persist

#---> Constant values
set terminal png enhanced font \"$fonts_file\" 20 size 1280,960
set bmargin 4
set xlabel \"Energy, Ry\" font \"$fonts_file,28\"
set ylabel \"Density of States, Ry^-1\" 0,-12 font \"$fonts_file,28\"
set xzeroaxis lt -1
set yzeroaxis lt -1
#set yrange [-50:50]
set xrange [-0.5:1.25]
set key top right
$style_line

#---> Variable values
set title \"DOS of atom(s) "$atoms_blanks" from $(echo $calc_dir | sed 's/_/\\\\_/g')\" font \"$fonts_file,24\"
set output \"$outfile\"
plot $plot_line
" > $plot_script   #| gnuplot
    chmod 755 $plot_script
    gnuplot $plot_script
done

exit 0
