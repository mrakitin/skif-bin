#!/bin/bash

# WIEN2k running jobs processor (qrun)
# Version: 3.0
# Author : Maxim Rakitin
# Email  : rms85@physics.susu.ac.ru
# Date   : 2012-07-31

#---> Characteristics of queue
tasks_list=$(squeue -o "%i,%j,%T" -u $USER -h)
if [ ! -z "$1" ]; then
    if [ "$1" = "-c" ]; then
        colors="yes"
    else
        tasks_list=$(squeue -o "%i,%j,%T" -u $USER -h | grep -e "$1")
        if [ "$2" = "-c" ]; then
            colors="yes"
        fi
    fi
fi
tasks_num=$(echo "$tasks_list" | grep . | wc -l)
tasks_ids=$(echo "$tasks_list" | cut -d, -f1)

unset num_nodes sum task_id task_info job_status
sum=0
for ((i=1; i<=${tasks_num}; i++)); do
    task_id[$i]=$(echo "${tasks_ids}" | head -$i | tail -1)
    task_info[$i]=$(scontrol show job ${task_id[$i]})
    job_status[$i]=$(echo "${task_info[$i]}" | grep "JobState=" | cut -d= -f2 | cut -c 1)
    if [ "${job_status[$i]}" = "R" ]; then
	num_nodes=$(echo "${task_info[$i]}" | grep "NumNodes=" | cut -d= -f2 | awk '{print $1}')
    else
	num_nodes="0"
    fi  
    sum=$(($sum + $num_nodes))
done
free_nodes=$(sinfo -p work -t idle -h -o "%D")
if [ -z "$free_nodes" ]; then
    free_nodes=0
fi

#---> Color processing:
if [ "$colors" = "yes" ]; then
    COLOR_NORMAL="tput sgr0"    # normal color
    COLOR_GREEN="tput setaf 2"  # green color
    COLOR_RED="tput setaf 1"    # red color
    COLOR_BLUE="tput setaf 4"   # blue color
else
    COLOR_NORMAL=""
    COLOR_GREEN=""
    COLOR_RED=""
    COLOR_BLUE=""
fi


#---> Define WIEN2k version
wien_version_string=$(cat $WIENROOT/VERSION)
wien_version=$(echo "${wien_version_string}" | cut -d_ -f 2 | cut -d. -f1)

#---> Output characteristics of queue
echo $(echo ${wien_version_string})
echo "-------------------------------"
echo "Number of all calculations = $tasks_num"
echo "Number of occupied nodes   = $sum"
echo "Number of free nodes       = $free_nodes"
echo -e "Last change at $(date -d "$(stat $HOME/qrep | grep "Modify" | cut -d: -f2- | awk '{print $1,$2}')" +"%F %H:%M:%S")\n"

shift_ID=$(( $(echo "${tasks_list}" | cut -d, -f1 | sort -g | tail -1 | sed 's/ //g' | wc -c) - 1 ))
#echo "=== shift_ID = ${shift_ID}";  exit 1

#echo -e "Last change at $(ls -lad $HOME/qrep | cut -d' ' -f6,7)\n"
#echo -e "Last change at $(date -d "$(stat $HOME/qrep | grep "Modify" | cut -d: -f2- | awk '{print $1,$2}')" +"%F %H:%M:%S")\n"
echo ""

#---> Output header
printf "%-"$shift_ID"s %-25s    %-7s  %-9s %-9s %-5s     %-12s %-20s %-17s %-17s\n" "ID" "Name" "Cycles" "Conv ENE" "Conv CHG" "Force" "Energy" "Current run" "Subroutine start" "Start date"
echo "----------------------------------------------------------------------------------------------------------------------------------------------"

#---> Run through all calculations
for ((i=1; i<=$tasks_num; i++)); do
    # Unset all variables used in this loop
    unset calc_name calc_id calc_dir struct_name iterations min_steps energy_conv charge_conv force_conv atoms_num \
	  energy current_run current_time start_date

    calc_name=$(echo "${task_info[$i]}" | grep " Name=" | cut -d= -f3 | awk '{print $1}' | cut -c 1-25)
    calc_id=${task_id[$i]}
    calc_dir=$(echo "${task_info[$i]}" | grep "WorkDir=" | cut -d= -f2 | sed 's/\/job$//g')
    cd $calc_dir
    struct_name=$(basename $PWD)

    #---> Cycles and iterations counter
    if [ -f "$struct_name.scf" ]; then
	iterations=$(grep -c ":ITE" $struct_name.scf)
    else
	iterations="0"
    fi

    if [ -f ":log" ]; then
	if [ ! -z "`grep '(min)' :log`" ]; then
	    if [ -f $struct_name.scf_mini ]; then
		min_steps=$(grep -c ":ITE" $struct_name.scf_mini)
    	    else
		min_steps="0"
	    fi
	else
	    min_steps="-"
	fi
    else
	min_steps="-"
    fi

    #---> Process convergence criteria
    if [ -f "$struct_name.dayfile" ]; then
	energy_conv=$(tac $struct_name.dayfile | grep -m1 ":ENERGY" | awk -F: '{print $3}' | awk '{print $3}' | cut -c 1-8)
	charge_conv=$(tac $struct_name.dayfile | grep -m1 ":CHARGE" | awk -F: '{print $3}' | awk '{print $3}' | cut -c 1-8)
    fi

    if [ "$energy_conv" = "0" ] ; then
	energy_conv=".0000000"
    elif [ "$energy_conv" = "" ] ; then
	energy_conv="--------"
    fi

    if [ "$charge_conv" = "0" ] ; then
	charge_conv=".0000000"
    elif [ "$charge_conv" = "" ] ; then
	charge_conv="--------"
    fi

    force_conv="-----"
    if [ -f "$struct_name.scf" ]; then
	force_conv=$(tac $struct_name.scf | grep ":FGL" -m$(grep -c "ATOM " $struct_name.struct) | awk '{print $3}; {print $4}; {print $5}' | sed 's/-//g' | sort -g | tail -1 | cut -c1-5)
	if [ -z "$force_conv" ]; then
            force_conv="-----"
        fi
    else
        force_conv="-----"
    fi

    #---> Fing energy in SCF file
    if [ -f "$struct_name.scf" ]; then
	energy_nofmt="$(tac $struct_name.scf | grep ":ENE" -m1 | cut -d"=" -f 2 | sed 's/ //g')"
	if [ ! -z "${energy_nofmt}" ]; then
	    energy=$(printf "%10.6f" "${energy_nofmt}")
	else
	    energy="--------------"
	fi
    else
	energy="--------------"
    fi
  
    #---> Time processing
    current_time="----------------"
    if [ -f ":log" ] ; then
	current_run=`cat :log | tail -1 | cut -d')'  -f 2 | sed 's/ //'`
        if [ ${#current_run} -ge "20" ]; then
	    current_run="$(echo $current_run | cut -c 1-17)..."
        fi
        current_time_nofmt=$(cat :log | tail -1 | cut -d'>'  -f 1 | sed 's/YEKST/UTC+6/')
	if [ ! -z "$current_time_nofmt" ]; then
            current_time=$(date -d "$current_time_nofmt" +"%F %R")
	fi
    fi
  
    #---> Job states processing
    job_state=${job_status[$i]}
    start_date="----------------"
    if [ "$job_state" == "R" ] ; then
	if [ -f "$struct_name.dayfile" ]; then
    	    start_date_nofmt=`grep " start " $struct_name.dayfile | cut -d'(' -f 2 | cut -d')' -f 1 | sed 's/YEKST/UTC+6/'`
	    if [ ! -z "${start_date_nofmt}" ]; then
    		start_date=$(date -d "$start_date_nofmt" +"%F %R")
	    fi
	fi
    else
	start_date="--- ${job_state} ---"
    fi

    #---> Dates processing and printing error jobs in red.
    if [ -f :log ]; then
        time_diff=$(echo "($(date --date="now" +%s) - $(date --date="$current_time" +%s))" | bc)
    else
        time_diff=10000
    fi

    #---> Print the result
    function print_command() {
        printf "%"$shift_ID"s %-25s %3s %1s %4s  %-9s %-9s %-5s %15s  %-20s %-17s %-17s\n" "$calc_id" "$calc_name" "$min_steps" "+" "$iterations" "$energy_conv" "$charge_conv" "$force_conv" "$energy" "$current_run" "$current_time" "$start_date"
    }

    if [ "$time_diff" -lt "1200" -a "$status" != " E " -a "$status" != " U " ]; then
        print_command
    else
        $COLOR_RED
        print_command
        $COLOR_NORMAL
    fi
done


exit 0

