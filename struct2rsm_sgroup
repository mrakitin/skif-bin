#!/bin/bash

# This script is to convert WIEN2k *.struct file to *.rsm file
#
# Author: Maxim Rakitin
# Email : rms85@physics.susu.ac.ru
# Date  : 2009-07-06

if [ -z "$1" ]; then
    echo "\
    Input *.struct file isn't specified
    Usage : `basename $0` struct_file"
    exit 1
fi

if [ ! -f "$1" ]; then
    echo "\
    Specified *.struct file doesn't exist"
    exit 2
fi

# Variables and parameters
struct_file=$1
common_name=`echo $struct_file | cut -d. -f1`
rsm_file=`echo $struct_file | cut -d. -f1`.rsm
alat_au=`head -4 $struct_file | tail -1 | awk '{print $1}'`
au_2_ang="0.529177"
atoms_num=`grep "X=" $struct_file | wc -l | sed 's/ //g'`
atom_type="Fe"
min1_distance="1"
min2_distance="1"

# Group 7 characterizes octa- or tetre-site
group7_num=`grep "X=" $struct_file | grep "\-7:" | wc -l | sed 's/ //g'`

if [ "$group7_num" = "8" ]; then
    struct_type="octa"
    # ATOM  55: X=0.50000000 Y=0.50000000 Z=0.33333333
    atom_Hx="0.50000000"
    atom_Hy="0.50000000"
    atom_Hz="0.33333333"
elif [ "$group7_num" = "4" ]; then
    struct_type="tetra"
    # ATOM  55: X=0.41666667 Y=0.50000000 Z=0.33333333
    atom_Hx="0.41666667"
    atom_Hy="0.50000000"
    atom_Hz="0.33333333"
else
    echo "	Incorrect number of atoms in the group 7: $group7_num"
    exit 3
fi


# Header in rsm-file
echo "REMARK  atoms as in $common_name.pdb
REMARK< i5><  > X     <  >    <x f8.3><y f8.3><z f8.3><f6.2><f6.3>" >$rsm_file

for((i=1; i<=$atoms_num; i++))
    do
    # current atom parsing
    current_string=`grep "X=" $struct_file | head -$i | tail -1 | cut -d: -f2 | sed 's/^ *//g'`

    atom_x=`echo $current_string | awk '{print $1}' | cut -d= -f2 | sed 's/ //g' | cut -c 1-10`
    atom_y=`echo $current_string | awk '{print $2}' | cut -d= -f2 | sed 's/ //g' | cut -c 1-10`
    atom_z=`echo $current_string | awk '{print $3}' | cut -d= -f2 | sed 's/ //g' | cut -c 1-10`
  
    # Shift x position
    trans_x=`echo "scale=10; $atom_x+$atom_Hx" | bc | cut -c -10`
    test_limits=`echo "$trans_x>=0.99" | bc`
    if [ "$test_limits" = 1 ] ; then
        trans_x=`echo "scale=10; ($trans_x)-1" | bc | cut -c -10`
    fi
    if [ "$trans_x" = "0" ] ; then
	trans_x=".00000000"
    fi
  
    # Shift y position
    trans_y=`echo "scale=10; $atom_y+$atom_Hy" | bc | cut -c -10`
    test_limits=`echo "$trans_y>=0.99" | bc`
    if [ "$test_limits" = 1 ] ; then
        trans_y=`echo "scale=10; ($trans_y)-1" | bc | cut -c -10`
    fi
    if [ "$trans_y" = "0" ] ; then
        trans_y=".00000000"
    fi
  
    # Shift z position
    trans_z=`echo "scale=10; $atom_z+$atom_Hz" | bc | cut -c -10`
    test_limits=`echo "$trans_z>=0.99" | bc`
    if [ "$test_limits" = 1 ] ; then
        trans_z=`echo "scale=10; ($trans_z)-1" | bc | cut -c -10`
    fi
    if [ "$trans_z" = "0" ] ; then
        trans_z=".00000000"
    fi

# ================================ RSM format ================================
    ang_x=`echo "scale=8; $trans_x*$alat_au*$au_2_ang" | bc | cut -c -5`
    if [ "$ang_x" == 0 ] ; then
        ang_x=0.000
    fi
    dot_check=`echo $ang_x | cut -c 1 | sed 's/ //g'`
    if [ "$dot_check" = "." ]; then
	ang_x=0`echo $ang_x | cut -c -4`
    fi

    ang_y=`echo "scale=8; $trans_y*$alat_au*$au_2_ang" | bc | cut -c -5`
    if [ "$ang_y" == 0 ] ; then
        ang_y=0.000
    fi
    dot_check=`echo $ang_y | cut -c 1 | sed 's/ //g'`
    if [ "$dot_check" = "." ]; then
	ang_y=0`echo $ang_y | cut -c -4`
    fi    
    
    ang_z=`echo "scale=8; $trans_z*$alat_au*$au_2_ang" | bc | cut -c -5`
    if [ "$ang_z" == 0 ] ; then
        ang_z=0.000
    fi
    dot_check=`echo $ang_z | cut -c 1 | sed 's/ //g'`
    if [ "$dot_check" = "." ]; then
	ang_z=0`echo $ang_z | cut -c -4`
    fi


    if [ "$i" -lt 10 ] ; then
        i_temp="0$i"
    else
        i_temp="$i"
    fi
    if [ "$i" = "55" ] ; then
	atom_type="H "
    fi
    echo "ATOM    $i_temp  IS  $atom_type     1       $ang_x   $ang_y   $ang_z  0.000 0.001" >>$rsm_file

    # Calculation the closest atoms
    distance[$i]=`echo "scale=8; sqrt(($trans_x-$atom_Hx)^2+($trans_y-$atom_Hy)^2+($trans_z-$atom_Hz)^2)" | bc | cut -c -5`
done

# =========== Find the 1st sphere =============
i=0
for j in ${distance[@]}
do
    let i=$i+1
    min1_dist_check=`echo "${distance[$i]}<$min1_distance" | bc`
    equal1_dist_check=`echo "${distance[$i]}==$min1_distance" | bc`

    if [ "$min1_dist_check" = "1" -a "${distance[$i]}" != "0" ]; then
	min1_distance=${distance[i]}
	first_sphere=()
        first_sphere=( "${first_sphere[@]}" "$i" )
#	echo "min_distance=${distance[i]}"
    fi
    if [ "$equal1_dist_check" = "1" ]; then
        first_sphere=( "${first_sphere[@]}" "$i" )
    fi
done

# =========== Find the 2nd sphere ============
i=0
for j in ${distance[@]}
do
    let i=$i+1
    if [ "$j" != "$min1_distance" ]; then
	min2_dist_check=`echo "${distance[$i]}<$min2_distance" | bc`
	equal2_dist_check=`echo "${distance[$i]}==$min2_distance" | bc`

        if [ "$min2_dist_check" = "1" -a "${distance[$i]}" != "0" ]; then
	    min2_distance=${distance[i]}
	    second_sphere=()
    	    second_sphere=( "${second_sphere[@]}" "$i" )
	fi
	if [ "$equal2_dist_check" = "1" ]; then
    	    second_sphere=( "${second_sphere[@]}" "$i" )
	fi
    fi
done


echo "	First sphere is : "${first_sphere[@]}
echo "	Second sphere is: "${second_sphere[@]}


# ============ Atoms part ===============
# Common_atoms colour : colour atoms [100,100,100]
# First sphere colour : colour atoms [153,204,0]
# Second sphere colour: colour atoms [255,128,0]
# Hydrogen atom colour: colour atoms [255,255,255]

atoms_rsm=""
for ((i=1; i<=$atoms_num; i++)); do
    atoms_rsm_temp="\
select atomno=$i
colour atoms [100,100,100]"
    # First sphere processing
    for j in ${first_sphere[@]}; do
	if [ "$j" = "$i" ]; then
	    atoms_rsm_temp="\
select atomno=$i
colour atoms [153,204,0]"
	fi
    done
    # Second sphere processing
    for k in ${second_sphere[@]}; do
	if [ "$k" = "$i" ]; then
	    atoms_rsm_temp="\
select atomno=$i
colour atoms [255,128,0]"
	fi
    done
    if [ "$i" = "$atoms_num" ]; then
	atoms_rsm_temp="\
select atomno=$i
colour atoms [255,255,255]"
    fi
    atoms_rsm="$atoms_rsm
$atoms_rsm_temp"
done

# ============ Labels part ===========
first_second=( "${first_sphere[@]}" "${second_sphere[@]}" "$atoms_num" )
for i in ${first_second[@]}; do
    labels_rsm_temp="\
select atomno=$i
label \"%e%i%A\""
    labels_rsm="$labels_rsm
$labels_rsm_temp"
done


# ============ Monitors part ===========
# First sphere contour 
for ((i=0; i<${#first_sphere[@]}; i++)); do
    for ((j=$i; j<${#first_sphere[@]}; j++)); do
	if [ "$i" != "$j" ]; then
	    monitors_rsm_temp="monitor ${first_sphere[$i]} ${first_sphere[$j]}"
	    monitors_rsm="$monitors_rsm
$monitors_rsm_temp"
	fi
    done
done

# Second sphere contour 
for ((i=0; i<${#second_sphere[@]}; i++)); do
    for ((j=$i; j<${#second_sphere[@]}; j++)); do
	if [ "$i" != "$j" ]; then
	    monitors_rsm_temp="monitor ${second_sphere[$i]} ${second_sphere[$j]}"
	    monitors_rsm="$monitors_rsm
$monitors_rsm_temp"
	fi
    done
done

# =========== End of output in rsm-file ===========
echo "
#!rasmol -rsm file
# Creator: RasTop Version 2.1.0
zap
set connect on
load pdb inline
set title $calc_dir

# Colour details
background [0,0,0]
set backfade off
set headlight [-79,17,-58]
set ambient 40
set specular on
set specpower 30
set shadepower 50
set depthcue off
set shadow off
stereo off

# Transformation
reset
rotate molecule
set picking ident
set worlddepth 5108
# zoom 182.43
scale 11.20
position x 0.000 y 0.000 z 0.000

# Rendering
colour axes [255,255,255]
set axes off
set boundingbox on
set unitcell off
set bondmode and
dots off

# Avoid Colour Problems!
select all
colour bonds none
colour backbone none
colour hbonds none
colour ssbonds none
colour ribbons none
colour white

# Atoms\
$atoms_rsm
select all
spacefill 50
set shadow off

# Bonds
wireframe off

# Ribbons
ribbons off

# Backbone
backbone off

# Labels
labels off
colour labels none
set fontsize 8\
$labels_rsm

# Monitors
set monitors on\
$monitors_rsm

# ssbonds
select all
ssbonds off

# hbonds
hbonds off

# Dots
set solvent false
set radius 0
set dots 1
dots off

# AtomSets
# no sets

select all

# World Transformation
rotate world
centre origin
set axes world on
colour world axes [255,255,255]
rotate world x 141.48
rotate world y -79.00
rotate world z 49.45
# translate world x 0.11
# translate world y -0.11
position world x 0.012 y -0.012
reset slab
slab off
reset depth
depth off
centre origin
molecule 1

exit
" >> $rsm_file

sleep 2

exit 0
