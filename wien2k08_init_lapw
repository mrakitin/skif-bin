#!/bin/csh -f
unalias rm

set name  = $0
set bin   = $name:h		#directory of WIEN-executables
if !(-d $bin) set bin = .
set name  = $name:t 		#name of this script-file
set logfile = :log
set tmp   = (:$name)		#temporary files

#---> functions & subroutines
alias	testinput	'if (! -e \!:1 || -z \!:1) goto \!:2'
alias	teststatus	'if ($status) goto error'
alias	teststop	'if (\!:1 == $stopafter ) goto stop;'\
			'if (-e stop) goto stop'
alias	output		'set date = `date +"(%T)"`;'\
			'printf ">   %s\t%s " "\!:*" "$date" ;'\
			'printf "\n>   %s\t%s " "\!:*" "$date" >> $dayfile'

alias	exec		'($bin/x \!:*) ;'\
			'teststatus'

alias	total_exec	'output \!:*;'\
			'exec  \!:*;'\
			'teststop \!:*'

#alias editor emacs
if($?EDITOR) then
    alias editor '$EDITOR'
else
  alias editor emacs
endif

#---> default parameters
set next		#set -> start cycle with $next
set stopafter

#---> default flags
unset help		#set -> help output
# options for batch usage
unset batch		
unset nosgrp
unset red		
unset vxc		
unset ecut		
unset rkmax		
unset fermit		
unset mix		
set numk=1000		
set sp=n
set flag=0

#---> handling of input options
echo ">   ($name) options: $argv"	>> $logfile
alias sb 'shift; breaksw'	#definition used in switch
while ($#argv)
  switch ($1)
  case -[H|h]:
    set help; sb
  case -[b]:
    set batch; sb
  case -nosgroup:
    set nosgrp; sb
  case -red: 
    shift; set red = $1; sb
  case -vxc: 
    shift; set vxc = $1; sb
  case -ecut: 
    shift; set ecut = $1; sb
  case -rkmax: 
    shift; set rkmax = $1; sb
  case -fermit: 
    shift; set fermit = $1; sb
  case -mix: 
    shift; set mix = $1; sb
  case -numk: 
    shift; set numk = $1; sb
  case -sp:
    set sp=y; sb
  case -e: 
    shift; set stopafter = $1; sb
  case -s:
    shift; set next  = $1; sb
  default: 
    echo "ERROR: option $1 does not exist!!"; sb
  endsw
end
if ($?help) goto help

#---> path- and file-names
set file    = `pwd`
set file    = $file:t           #tail of file-names
set dayfile = $file.dayfile	#main output-file

if ($?nosgrp) then
  set flag=1                    # This is for sgroup processing
endif

#---> starting out
if ($next != "") goto start	#start with optional program
set next = 'setrmt'			#default start with lstart
if (-e $dayfile) then		#start with last program
  echo "" >> $dayfile
  set next =	`grep '>' $dayfile |tail -1l |awk '{print $2}'`
endif
if ($next == "") then
   set next = 'setrmt'              #default start with nn
else if ($next == 'stop' ) then
   set next = 'setrmt'	        #default start with nn
else if !($next == 'setrmt') then 
   set b=r
   if (! $?batch) then
   echo "continue with " $next  "or restart with setrmt (c/r)"
   set b=($<)
   endif
   if ($b == 'r') then 
   set next='setrmt'
   endif
endif

start:				#initalization of input-files

printf "\n\n    start \t(%s) " "`date`"	> $dayfile
echo next is $next 
goto $next

setrmt:
testinput	$file.struct error
if (! $?batch) then
  echo "Automatic determination of RMTs. Please specify the desired RMT reduction "
  echo "compared to almost touching spheres."
  echo "Typically, for a single calculation just hit enter, for force minimization"
  echo "use 1-5; for volume effects you may need even larger reductions."
  echo " "
  echo "Enter reduction in %"
  set red=($<)
endif
if ($?red ) then
  if ($red == '') then
    setrmt_lapw $file 
  else
    setrmt_lapw $file -r $red
  endif
  set b=d
  if (! $?batch) then
    echo "Do you want to accept these radii; discard them; or rerun setRmt (a/d/r):"  
    set b=($<)
  endif
  if ($b == 'r') then
        goto setrmt
  else if ($b == 'd') then
        goto nn
  else
        cp $file.struct_setrmt $file.struct
  endif
endif
  
nn:
testinput	$file.struct error
if (! $?batch) then
  total_exec	nn
else
  echo 2 | $bin/x nn   
  teststatus    
endif
set bb1 = `grep WARNING: $file.outputnn`
set bb2 = `grep ERROR  $file.outputnn`
if (! $?batch) then
  echo "-----> check in " $file.outputnn " for overlapping spheres, "
  echo "       coordination and nearest neighbor distances" 
  editor $file.outputnn
endif
if ( $#bb1 != 0 ) then
if ($?batch) then
  set b=n
else
  echo "-----> DO YOU WANT TO USE THE NEW" $file.struct_nn "file (y/n)"
  set b=($<)
endif
  if ($b == 'y') then 
    cp $file.struct $file.struct_init
    cp $file.struct_nn $file.struct
    echo " Original struct file saved to" $file.struct_init
    echo " CREATE A NEW" $file.inst "FILE with PROPER ATOMS"
    instgen_lapw
    goto nn
  endif
endif
if ($?batch) then
  set b=c
else
  echo "-----> continue with sgroup or edit the" $file.struct "file (c/e)" 
  set b=($<)
endif
if ($b == 'e') then 
  editor $file.struct
  goto nn
endif
if ( $#bb2 != 0 ) then
  echo "WARNING: YOU SHOULD PROBABLY MODIFY YOUR STRUCT FILE (see " $file.outputnn ")"
  #exit 9
endif

sgroup:
total_exec sgroup 
grep 'of point group' $file.outputsgroup | grep -v this | grep -v Short 
grep 'space group' $file.outputsgroup | grep -v Note
grep '\!\!' $file.outputsgroup 
if ($?batch) then
  if ($flag == 0) then 
    cp $file.struct_sgroup $file.struct
    instgen_lapw
    set flag=1
    goto nn
  endif  
else
  echo "-----> check in " $file.outputsgroup " for proper symmetry, compare"
  echo "       with your struct file and later with " $file.outputs
  editor $file.outputsgroup
  echo "       sgroup has also produced a new struct file based on your old one."
  echo "       If you see warnings above, consider to use the newly generated "
  echo "       struct file, which you can view (edit) now."
  echo "-----> continue with symmetry or edit $file.struct_sgroup ? (c/e)" 
  set b=($<)  
    if ($b == 'e') then 
    editor $file.struct_sgroup
    echo "-----> Do you want to use the new struct file (and generate new $file.inst) ? (y/n) "    
    set bb=($<)
    if ($bb == 'y') then 
      cp $file.struct_sgroup $file.struct
      echo " generating a new $file.inst file:"
      instgen_lapw
      goto nn
    endif
  endif
endif

symmetry:
testinput	$file.struct error
if (-e $file.in2_sy ) rm $file.in2_sy
total_exec	symmetry
set bb = `grep SHIFTED $file.outputs`
if ( $#bb == 9 ) then
  echo "WARNING: YOU MUST MOVE THE ORIGIN (see " $file.outputs ")"
  if ($?batch) then
    exit (3)
  endif
endif
if (! $?batch) then
  echo "-----> check in " $file.outputs " the symmetry operations, "
  echo "       the point symmetries and compare with results from sgroup"
  editor $file.outputs 
  echo "-----> continue with lstart or edit the" $file.struct_st "file (c/e/x)" 
  set b=($<)
  if ($b == 'e') then 
    editor $file.struct_st
    mv $file.struct_st $file.struct
    goto symmetry
  endif
  if ($b == 'x') then 
    if (-e $file.struct_st ) then
      cp $file.struct $file.struct_orig
      cp $file.struct_st $file.struct
    endif
    exit (0)
  endif
  if ( $#bb == 9 ) then
  echo "STOP: YOU MUST MOVE THE ORIGIN OF THE UNIT CELL (see " $file.outputs ")"
  exit 9
  endif
endif

lstart:
if (! -e $file.inst) instgen_lapw
testinput	$file.inst error
if (! $?batch) then
  total_exec	lstart
else
  if(! $?vxc) set vxc=13
  if(! $?ecut) set ecut=-6.
  $bin/x lstart -d
  lstart lstart.def <<EOF
$vxc
$ecut
EOF
  teststatus
endif
set bb=`grep nstop $file.outputst`
if ( $#bb > 2 ) then
echo "ERROR \!\!\! $bb"
echo "You have to change your atomic configuration in $file.inst "
endif
set bb=`grep IZ $file.outputst`
if ( $#bb > 2 ) then
echo "ERROR \!\!\! $bb"
echo "You have to change your atomic configuration in $file.inst or Z in $file.struct "
endif
set bb=`grep WARNING $file.outputst`
if ( $#bb > 2 ) then
grep WARNING $file.outputst
endif

if (! $?batch) then
  echo "       check in " $file.outputst " how much core charge leaks out  "
  echo "       eventually you need to select a smaller ECORE or larger spheres"
  editor $file.outputst
  echo "-----> continue with kgen or edit the" $file.inst "file (c/e)" 
  set b=($<)
  if ($b == 'e') then 
    editor $file.inst
    goto lstart
  endif
endif
cat $file.in2_ls $file.in2_sy > $file.in2_st

inputfiles:
if (! $?batch) then
  echo "-----> in " $file.in1_st " select   RKmax ( usually 5.0 - 9.0 )" 
  editor $file.in1_st
  echo "-----> in " $file.in2_st " select   LM's, GMAX and Fermi-Energy method" 
  editor $file.in2_st
  echo "-----> in " $file.inm_st " Reduce mixing factor and PW-scaling for difficult cases (localized magnetic systems)"
  editor $file.inm_st
else
  if($?rkmax) then
    sed "2s/^......./ $rkmax /" $file.in1_st >.in
    mv .in $file.in1_st
  endif
  if($?fermit) then
    sed "3s/^TETRA........../TEMP $fermit /" $file.in2_st >.in
    mv .in $file.in2_st
  endif
#        12.00          GMAX/12.00          GMAX                       # Added by Maxim Rakitin MR at 2010-11-01 (Mon) at 23:50
  sed "s/...............GMAX/20.00          GMAX/g" -i $file.in2_st    # Added by Maxim Rakitin MR at 2010-11-01 (Mon) at 23:50
  if($?mix) then
    sed "2s/^...../$mix /" $file.inm_st >.in
    mv .in $file.inm_st
  endif
endif

output inputfiles prepared
echo ' '
  if (-e $file.struct_st ) then
      cp $file.struct $file.struct_orig
      #cp $file.struct_st $file.struct
  endif
  if (-e $file.in0_st ) cp $file.in0_st $file.in0
  if (-e $file.in1_st ) cp $file.in1_st $file.in1
  if (-e $file.in2_st ) cp $file.in2_st $file.in2
  if (-e $file.inc_st ) cp $file.inc_st $file.inc
  if (-e $file.inm_st ) cp $file.inm_st $file.inm
  if (-e $file.inq_st ) cp $file.inq_st $file.inq

set b = `grep INVERSION $file.outputs`
if ( $#b == 7 ) then
output inputfiles for lapw1c/2c prepared, no inversion present
echo ' '
  if (-e $file.in1 ) mv $file.in1 $file.in1c
  if (-e $file.in2 ) mv $file.in2 $file.in2c
endif

kgen:
testinput	$file.struct error	#. 
if (! $?batch) then
  total_exec	kgen
  echo "-----> check in " $file.klist " number of generated K-points" 
  editor $file.klist 
  echo "-----> continue with dstart or execute kgen again or exit (c/e/x)" 
  set b=($<)
  if ($b == 'e') then 
    #  editor $file.outputkgen
    goto kgen
  endif
  if ($b == 'x') exit (0) 
else
  set inversion
  if (-e $file.in1c ) set inversion=1
  $bin/x kgen -d
####$inversion and long output now automatically
  kgen kgen.def <<EOF
$numk
1
EOF
  teststatus
endif

dstart:
set complex
set compl
testinput	$file.in1c dstart1	 
set complex=-c
set compl=c
dstart1:
testinput	$file.in1$compl error	 
total_exec	dstart $complex
set bb1 = `grep :WARN $file.outputd`
echo $bb1
if (! $?batch) then
  echo "-----> check in " $file.outputd " if gmax > gmin, normalization" 
  editor $file.outputd 
  if ( $#bb1 != 0 ) then
    echo "Do you want to edit $file.in2$compl, increase GMAX, and rerun dstart (y/n)"
    set b=($<)
    if ($b != 'n') then 
      editor $file.in2$compl
      goto dstart
    endif
  endif
endif
  if (  ! -z $file.in0_std && -e $file.in0_std ) then  
   cp $file.in0_std $file.in0
   echo "-----> new $file.in0 generated" 
  endif
   cp $file.clmsum new_super.clmsum
if (! $?batch) then
  echo "-----> do you want to perform a spinpolarized calculation ? (n/y)" 
  set sp=($<)
endif
if ($sp == 'y') then 
  total_exec	dstart -up $complex
  if (! $?batch) then
    editor $file.outputdup
  endif
  total_exec	dstart -dn $complex
  if (! $?batch) then
    editor $file.outputddn
  endif
   cp $file.clmup new_super.clmup
   cp $file.clmdn new_super.clmdn
else
# fix nband in case.in1
  set a=`grep K-VECTORS $file.in1_st|grep -v red|cut -c21-`
  set aa=`echo $a[4] |grep -e \[0-9\]`     # get only numbers
  @ a2 = $aa / 2
  sed "s/ $aa / $a2   red /" $file.in1_st > .tmp
  mv .tmp  $file.in1_st
  cp $file.in1_st $file.in1$compl
  goto stop
endif

if ( $?batch) goto stop
echo "-----> do you want to perform an antiferromagnetic calculation ? (N/y)" 
set b=($<)
if ($b != 'y') goto stop 

afminput:
echo "I hope you have        flipped the spin of the AF-atom"
echo "                       made zero spin for non-magnetic atoms"
echo "in $file.inst "
echo "-----> do you want to continue or edit $file.inst ? (c/e)"
set b=($<)
if ($b == 'e') then 
  editor $file.inst
  goto lstart
endif
total_exec  afminput
echo "You can now use     runafm_lapw   for scf"
echo "BUT  PLEASE  NOTE:  AFMINPUT and CLMCOPY  are NOT WELL TESTED"
echo "You must test your results with an unconstraint  runsp_lapw  afterwards" 
echo "and recheck the rules generated by afminput"
editor $file.outputafminput
editor $file.inclmcopy_st
cp $file.inclmcopy_st $file.inclmcopy
 

stop:					#normal exit
printf "%s\n\n" "init_lapw finished" 	>> $dayfile
printf "\n   stop\n"			>> $dayfile
exit 0 

error:					#error exit	
printf "\n   stop error\n"		>> $dayfile
exit 1

help:					#help exit 
cat << theend 

PROGRAM:	$0

PURPOSE:	initialisation of the l/apw-package WIEN2k
		to be called within the case-directory
		has to be located in WIEN-executable directory
		needs case.struct  file

USAGE:		$name [OPTIONS] [FLAGS]

FLAGS:
-h/-H 	   ->	help
-b	   ->	batch (non-interactive) mode (see possible options below, SGROUP is always ignored !)
-nosgroup  ->   in batch mode: don't use case.struct_sgroup
-sp	   ->	in batch mode: select spin-polarized calculation

OPTIONS:
-red X     ->	in batch mode: RMT reduction by X % (default: RMT not changed)
-vxc X     ->	in batch mode: VXC option (default: 13 = PBE )
-ecut X    ->	in batch mode: energy seperation between core/valence (default: -6.0 Ry)
-rkmax X   ->	in batch mode: RKMAX  (default: 7.0, not changed)
-fermit X  ->	in batch mode: use TEMP with smearing by X Ry (default: TETRA)
-mix X     ->	in batch mode: set mixing to X  (default: 0.2, not changed)
-numk X    ->	in batch mode: use X k-points in full BZ (default: 1000)
-s PROGRAM -> 	start with PROGRAM ($next)
-e PROGRAM ->	exit after PROGRAM ($stopafter)
		
theend

exit 1



